name: publish-release-on-tag
on:
  push:
    tags:
      - 'v*'
jobs:
  pylint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - run: |
          # need to install setuptools first, as wrapt's (pylint sub-dep) install scripts depends on it
          python3 -m pip install -r .github/workflows/setuptools-requirements.txt
          python3 -m pip install -r .github/workflows/pylint-requirements.txt
          python3 -m pip install -r requirements.txt
          python3 -m pylint -E dyco
  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - run: |
          python3 -m pip install -r .github/workflows/black-requirements.txt
          python3 -m black --diff --check dyco
  hadolint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - run: docker run --rm -i hadolint/hadolint:latest-alpine < Dockerfile
  release:
    needs:
      - pylint
      - black
      - hadolint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
  deploy:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: install gnu parallel
        run: apt-get install parallel
      - name: build image
        run: |
          DYCO_VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          docker build . --file Dockerfile --tag dyco --build-arg DYCO_VERSION="${DYCO_VERSION}"
      - name: registry login
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/dyco

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo ${IMAGE_ID} | tr '[A-Z]' '[a-z]')

          # Strip git tag ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,^refs/tags/,,')

          echo "IMAGE_ID=${IMAGE_ID}"
          echo "VERSION=${VERSION}"

          docker tag dyco "${IMAGE_ID}:${VERSION}"
          parallel --retries 5 --delay 15s ::: docker push "${IMAGE_ID}:${VERSION}"

          # if this is the highest version git tag, push :latest
          # sleep (hopefully) reduces the chances of push failing with "blob upload unknown" error
          [ "$(git tag | sort -V | tail -n1)" == "${VERSION}" ] \
          && docker tag dyco "${IMAGE_ID}:latest" \
          && sleep 5 \
          && parallel --retries 5 --delay 15s ::: docker push "${IMAGE_ID}:latest"
